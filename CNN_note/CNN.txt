#############
# CNN
#############

## computer vision problem
- image classification
- object detection
- neural style transfer

## convolution neural network (CNN)
- image data * filter 
- filter scan the image data and then calculate weighted avg(convolution)
- vertical edge filter 
1 0 -1    1 0 -1 Sobel filter
1 0 -1    2 0 -2
1 0 -1    1 0 -1

- python: conv-forward
- tensorflow: tf.nn.conv2d
- keras: conv2D

- padding
--Problem: shrinking output; throw away a lot of info from edge.
--nxn * fxf = (n-f+1)x(n-f+1)  (no padding: "valid", f is usually odd)
            = (n+2p-f+1)x(n+2p-f+1) (with padding pxp: "same" means output size = input size)
            
- stride
-- filter moving steps: s
-- nxn * fxf = floor[(n+2p-f)/s + 1] x floor[(n+2p-f)/s + 1]  

- Converlution over vol
--3 chanel image need 3 filters, chanels dim need to match
  e.g 6x6x[3] image 3x3x[3] filter = each output is 27(3x3x3) number weighted avg
  nxnxn_c  *  fxfxn_c = (n-f+1) x (n-f+1) x n_c' (# of filters, for vert edge, horz edge)
  
 = 1 layer CNN
 - Z[i] = W[i]A[i-1] + b[i]
         = filter*image + biase correction
       
 - A[i] = activation(Z[i])
         = ReLU(output from multiple filters)
  
 - Notation see CNN_notation1      
 
 = Deep CNN
 - see CNN_ex
 
